Chapter 2 - Marpa's Advantages
==============================

!include "guide/menu.inc"

Of course, the heading means advantages over other methods of parsing.

* It is available as a linkable library

* It is written in C for speed

* Marpa parses in times considered theoretically optimal

* Marpa parses all classes of grammar in practical use today in linear time, O(n)

* Grammars can be ambiguous

This means Marpa can tell you how many different ways there are of interpreting the token stream.

* Marpa supports grammars having nullable symbols

* Rules can be recursive

Try that with a regexp!

* Your grammar can be described in an extended version of BNF

This means you provide the rules as text, not as code. Marpa provides the code to implement these rules.
That is, Marpa generates a parser tailored to your BNF.

This is declarative parsing.

Rules have an optional _action_ adverb, indicating where Marpa is to trigger your callback to handle intermediate results.

This provides an exceptionally clean interface between the rules and any code you need to handle specific cases.

You action subs can communicate with each other via a 'per-parse argument', which is passed to each action sub as
its first parameter. This per-parse argument defaults to an empty hashref. For Marpa, it is read-only:
It is reserved for the exclusive use of your code.

This Marpa-specific BNF is called SLIF DSL (Scanless Interface Domain-Specific Language).

* Marpa lexes the token stream

This means you do not have to provide a separate lexer.

In special cases you can of course take over the lexing yourself.

* Marpa is extensively documented

[Start here](https://metacpan.org/release/Marpa-R2).

And, the author has a [Marpa-oriented blog](http://jeffreykegler.github.io/Ocean-of-Awareness-blog/).

* Marpa can pause parsing at any place in the token stream, hand control over to you, then resume parsing at any place in the input stream

This is procedural parsing.

Consequently, you can freely switch back and forth between declarative and procedural parsing.

Rules have an optional _pause_ adverb, indicating where Marpa is to return to your calling code, until such time as you
call resume(). This is not the same as the callback trigger mechanism mentioned above.

During the pause, a set of methods allows you to interrogate Marpa about the current state of the parse.

It also means you can parse the next part of the token stream yourself, and tell Marpa to skip what you've handled.

* Error reporting can provide the precise location of an error

This means the string just preceeding and just following the error can be retrieved, as well as a list of the tokens
Marpa was expecting to see at that point.

Even better, Marpa can tell you which rule(s) it was evaluating.

* Marpa allows you to fabricate input, using its knowledge of what was expected when it errored

This is called [Ruby Slippers parsing](http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2011/11/marpa-and-the-ruby-slippers.html).

* Rules can have an _event_ adverb

Rules can share events via their (event) name.

Events can be activated and deactivated.

The current status of each event can be interrogated by your code during a pause.

* Marpa has built-in tracing facilities

* Marpa has a 'thin' interface, for direct access to libmarpa

* Marpa prunes all nulled subtrees back to their topmost nulled node

In Marpa parses, rules and symbols can be nulled. In other words they can derive the zero-length, or null, string.

* Further, you can short-circuit evaluation during any _action_ sub

See 'Bailing out of parse evaluation' in the docs for the Marpa::R2::Semantics package.

Recall from [Chapter 1](chapter1.html), Marpa has 3 phases: Grammar pre-processing; Recognition; and Evaluation.

* Marpa changes the way we think about parsing

This automatically leads us to greatly expand what problems now fit the definition of 'parseable'.

* Marpa has many other advantages, but we have to stop somewhere

!include "guide/menu.inc"
